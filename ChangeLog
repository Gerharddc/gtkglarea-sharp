2006-01-11  C.J. Collier  <cjcollier@colliertech.org>

	Overview:Renamed RotationMatrix to TransformationMatrix (I'm
	thinking of getting rid of the matrix and replacing it with a
	quaternion for rotation + a vector for scale and a vector for
	translation).  Triangle and Square objects now draw themselves
	correctly.  I've also had a chance to straighten out the IGLObject
	Translate() methods.

	* configure.ac
	- Bumped version
	* TODO
	- removed GimbalLock issue from TODO list
	- added item for re-factoring Euler angles
	- added item for .mdl / .md3 files
	* examples/NeHe/Lessons/Lesson01.cs
	- changed namespace from NeHe.Lesson01 to NeHe
	- basically replaced with GladeExample code
	* examples/NeHe/Lessons/Lesson02.cs
	- changed namespace from NeHe.Lesson02 to NeHe
	- added Triangle, Square objects.  Translated them
	- removed methods that are implemented in GLObjectBase
	- added onquit and onwindowdeleteevent methods
	* examples/NeHe/Lessons/Makefile.am
	- re-organized sources into SOURCE_FILES
	- created a MCS_ARGS variable to reduce duplicate code
	* examples/trackball/TrackballExample.mdp
	- added resources directory to project
	* examples/GtkGlAreaSharpExamples.mds
	- renamed *test to *example
	- added NeHe project
	- added GtkGLAreaUtil
	- added GladeExample
	* examples/util/TransformationMatrix.cs
	- renamed from RotationMatrix.cs
	- added operator *()
	* examples/util/Teapot.cs
	- added Translate() methods	
	* examples/util/EulerRotation.cs
	- renamed rotationmatrix to transformationmatrix	
	* examples/util/IGLObject.cs
	- added Translate() methods
	- renamed rotationmatrix to transformationmatrix
	* examples/util/GLObjectBase.cs
	- renamed rotationmatrix to transformationmatrix	
	* examples/util/RotationMatrix.cs
	- renamed to TransformationMatrix.cs
	* examples/util/Makefile.am
	- renamed rotationmatrix to transformationmatrix
	- added Triangle, Square
	* examples/util/Quaternion.cs
	- renamed rotationmatrix to transformationmatrix
	* examples/util/GLWidget.cs
	- moved the projection translation into the resize handler


2006-01-10  C.J. Collier  <cjcollier@colliertech.org>

	Overview: Moved common code into examples/util/ and compiled them
	down to a gtkglarea-sharp-util.dll file.  I added a make run entry
	for each of the examples, since they require a modification to the
	MONO_PATH environment variable.

2006-01-09  C.J. Collier  <cjcollier@colliertech.org>
	* examples/trackball/Vector.cs
	- New link to ../rotate-buttons/Vector.cs
	* examples/trackball/TrackballWidget.cs
	- removed debug print statements
	* examples/trackball/Makefile.am
	- Added Vector.cs
	* examples/trackball/trackballTest.mdp
	- re-structured for new code
	* examples/GtkGlAreaSharpExamples.mds
	- removed old project
	- added new projects
	! moved common to util:
	examples/common
	examples/common/Teapot.cs
	examples/common/glwidget.glade
	examples/common/Trackball.cs
	examples/common/Makefile.am
	examples/common/GLWidget.cs
	* examples/rotate-buttons/GLObjectBase.cs
	- changed += to *=
	* examples/rotate-buttons/Quaternion.cs
	- shortened line
	- changed operator+ to operator*
	- re-wrote operator* based on Vector code
	- removed Vector-specific code and placed in Vector.cs
	* examples/rotate-buttons/Vector.cs
	- Moved vector-specific code from Quaternion.cs to Vector.cs
	* examples/resources
	- created a directory to contain images and glade-ish things
	* examples/util
	- renamed common to util


2006-01-06T15:17  C.J. Collier  <cjcollier@colliertech.org>

	Overview: Applying new classes from rotate-buttons to this
	example.  Linked to the new class files from ../rotate-buttons and
	got a compiling version working.  Runtime errors, though.

	* EulerRotation.cs
	- created link
	* trackballTest.cs
	- There is now a class variable called glw
	- Set glw to a new instance of TrackballWidget
	- created a new Teapot
	- added teapot to glw
	- replaced glw.glArea with glw
	* IGLObject.cs
	- created link	
	* TrackballWidget.cs
	- replaced the float[] quat with a Quaternion
	- replaced glArea. with this.
	- placed into the GtkGL. namespace
	- when OnMotionNotify is called, all glObjects associated with
	this glArea get Rotate()d
	- removed onExposed.  parent class will handle exposed event.
	* GLObjectBase.cs
	- created link	
	* RotationMatrix.cs
	- created link	
	* Makefile.am
	- re-structured to be like Makefile.am from ../rotation-buttons/
	* Quaternion.cs
	- created link	
	* GLWidget.cs
	- created link	


	

2006-01-06T12:06  C.J. Collier  <cjcollier@colliertech.org>

	Overview: Fixed EulerRotation.ToRotationMatrix()
	
	* examples/rotate-buttons/GLObjectRotationController.cs
	- remove TODO from GLObjectRotationController.cs (complete)
	- Created Get*Rotation, for Euler, Quaternion and Matrix
	- fixed docs
	* examples/rotate-buttons/ObjectRotationButton.cs
	- added bools to make sure the handlers aren't connected >1 times
	* examples/rotate-buttons/RotationMatrix.cs
	- Added an operator + for RotationMatrix objects
	* examples/rotate-buttons/GLObjectBase.cs
	- made setting of euler, matrix, quat an atomic action
	- cleaned up the Rotate() methods
	- ResetRotation sets eRot to EulerRotation.Identity()
	- added Get*Rotation() methods
	* examples/rotate-buttons/Quaternion.cs
	- added an Identity property
	* examples/rotate-buttons/EulerRotation.cs
	- added Get
	- cleaned up the null test in operator +
	- fixed the ToRotationMatrix() method
	* examples/rotate-buttons/IGLObject.cs
	- added Get*Rotation to the interface


2006-01-06  C.J. Collier  <cjcollier@colliertech.org>

	Overview: GtkGL.Rotation has been deprecated.  Now replaced with
	one of EulerRotation, Quaternion or RotationMatrix.  Replacing
	float variables with double.  Let's see how this works...  Also,
	turned on debugging symbols

	* configure.ac
	- bumped version to 0.0.8
	* checkbuild.sh.in
	- added command to push new version to colliertech.com/downloads/...
	* examples/rotate-buttons/GLObjectRotationController.cs
	- rather than storing a local copy, we get the rotation from the object
	- using EulerRotation rather than Rotation
	* examples/rotate-buttons/ObjectRotationButton.cs
	- removed GtkGL.Rotation and replaced with GtkGL.EulerRotation
	* examples/rotate-buttons/GLObjectBase.cs
	- now using a GtkGL.RotationMatrix instead of a float[16]
	- adding a GtkGL.EulerRotation and GtkGL.Quaternion for flavor
	- added implementations of Rotate() that accept Quaternion,
	EulerRotation and RotationMatrix
	- removed the one that accepts GtkGL.Rotation
	- ResetRotation sets the rotation to the identity rather than null
	- GetRotation catches gimbal lock exception
	- Instead of converting from RotationMatrix, it should return the local EulerRotation object.
	* examples/rotate-buttons/RotationMatrix.cs
	- Added file.  Represents a Rotation Matrix
	* examples/rotate-buttons/Quaternion.cs
	- Added file.  Represents a Quaternion
	* examples/rotate-buttons/EulerRotation.cs
	Added file.  Represents a Euler Rotation
	* examples/rotate-buttons/Teapot.cs
	- replaced Rotate() methods with new versions
	- changed f to d in glMultMatrixf
	* examples/rotate-buttons/RotationUtil.cs
	- removed EulerRotation, since there is now a EulerRotation.cs
	- using Accessors rather than hitting the member variables directly
	* examples/rotate-buttons/IGLObject.cs
	- replaced GtkGL.Rotation version of Rotate with Euler, Quat and Matrix
	* examples/rotate-buttons/Makefile.am
	- added Euler Quat and Matrix cs files
	- added -debug to the mcs command line
	* examples/rotate-buttons/rotateButtonTest.mdp
	- added Euler Quat and Matrix cs files


2006-01-02  C.J. Collier  <cjcollier@colliertech.org>
	
	Overview: The entry fields may now be used to rotate the object as
	well as the buttons.  They are updated when the buttons are
	pressed, and if a number is entered into them, the object is
	rotated to that angle

	* examples/rotate-buttons/Teapot.cs
	- added methods to rotate and reset rotation that take a third
	argument which indicates whether or not the handler should be
	fired
	* examples/rotate-buttons/GLObjectRotationController.cs
	- added lots of documentation
	- added a method to update the rotation of the object based on the
	values entered into the entry fields
	- aligned numbers left
	- added the UpdateObjectRotation method to the event object's
	Activated and FocusOutEvent events
	* examples/rotate-buttons/RotationUtil.cs
	- documented the EulerRotation struct
	* examples/rotate-buttons/IGLObject.cs
	- added the method signatures for optional Updated event firing
	* examples/rotate-buttons/GLObjectBase.cs
	- whitespace
	
2006-01-01  C.J. Collier  <cjcollier@colliertech.org>

	Overview: Completed writing code to update the entry fields when
	the +/- buttons are pressed

	* examples/NeHe/Lessons/Makefile
	- Added our build testing script
	* examples/rotate-buttons/GLObjectRotationController.cs
	- Added an EulerRotation object to the class to keep track of the
	rotations represented to the user
	- re-bound to ObjectRotationButton's Rotated event instead of
	IGLObject's Updated event
	- now resetting the Euler rotation values and re-displaying when
	the reset button is triggered.
	* examples/rotate-buttons/ObjectRotationButton.cs
	- made the rotation member public
	- added a Rotated event
	! RotateObjects()
	- fire the Rotated event after the object has been rotated


2005-12-31T22:46  C.J. Collier  <cjcollier@colliertech.org>

	Overview: Entry fields are now filled in when the buttons are
	pressed.  Sort of.  There's a gimbal lock error causing strange
	things to happen.  Try it out.  Please tell me if you know how to
	fix it.

	* rotate-buttons/GLObjectRotationController.cs

	- Created a Hashtable called entryMap.  It maps between the keys,
	'x', 'y', and 'z'.and the entry widgets (values) for X, Y and Z
	rotation, respectively.  I think of this as a %hash variable in
	perl (pseudocode shown here):

	%entryMap = (
	chr('x') => gtkglWidget("X rotation entry widget"),
	chr('y') => gtkglWidget("Y rotation entry widget"),
	chr('z') => gtkglWidget("Z rotation entry widget"),
	);

	! UpdateRotationValues()
	- This handler is connected to the IGLObject's Updated event
	- Every time the object fires an Updated event, the Euler
	rotation angles are calculated from the internal representation of
	the object's rotation (currently a rotation matrix, possibly in
	the future a quaternion) and displayed in the appropriate entry
	widget.
	! GLObjectRotationController()
	- connect afore-mentioned handler to the Updated signal
	- create afore-mentioned entryMap
	* rotate-buttons/IGLObject.cs
	- corrected a comment
	- add a method to the interface requirements called GetRotation()
	that returns an euler rotation.  Perhaps it should be called
	getEulerRotation() instead...  Please don't consider this part of
	the API hard and fast.  Thanks.
	* rotate-buttons/GLObjectBase.cs
	- implemented above-mentioned GetRotation() method in this "base" class
	* rotate-buttons/Makefile.am
	- Added RotationUtil.cs and GLObjectRotationController.cs to the
	prereqs list for rotateButtonTest.exe.  I should have caught the
	latter sooner than I did.  But I haven't pushed a build in a
	while, so it's okay :)
	- added RotationUtil.cs to the mcs command line
	* rotate-buttons/rotateButtonTest.mdp
	- Added RotationUtil.cs to the mdp file
		
	

2005-12-31  C.J. Collier  <cjcollier@colliertech.org>
	Overview: Created an GLObjectRotationController, which encompases
	the object rotation UI and the handlers associated with it.  This
	controller contains ObjectRotationButton widgets; a Clockwise and
	CounterClockwise button for each each axis, X, Y and Z.  The
	GLObjectRotationController class was refactored out of
	rotateButtonTest.cs and lives in GLObjectRotationController.cs.
	Also, the object manipulation widgegt was refactored from the
	glwidget.glade file into its own rotation-controller.glade file

	* examples/rotate-buttons/Teapot.cs
	- explicitly specified "new" in method signature.  Yes, we know
	we're overriding.
	* examples/rotate-buttons/GLObjectRotationController.cs
	- created this file by refactoring code out of rotateButtonTest.cs
	* IGLObject.cs: Newline changes
	* GLObjectBase.cs
	- swapped rotation directions.  Had CC-wise going C-wise and vice versa
	* Makefile.am
	- Mentioned new .cs and .glade files
	* rotateButtonTest.mdp
	- Mentioned new .cs and .glade files
	* GLWidget.cs
	- now using Gtk
	- AddGLObject(): Added object to list *after* connecting handler
	- Init(): added some comments
	- Init(): moved handlers into Init() from connectHandlers()
	- deleted connectHandlers()
	- OnSizeAllocated(): added comment, removed newline
	- OnExposed(): modified comment, removed debugging message
	- OnRealized(): Added comment, removed debugging message
	- added OnQuit(), OnWindowDeleteEvent() handlers to the class
	* rotation-controller.glade: Created
	* rotateButtonTest.cs
	- created a member variable for the glw widget
	- same for GLObjectRotationController object
	- refactored GLObjectRotationController code into new class
	- moved GLWidget-specific handlers into GLWidget

2005-12-30  C.J. Collier  <cjcollier@colliertech.org>
	Overview: Rotation on button click has (finally) been implemented.
	IGLObject objects are required to have an Update EventHandler now.
	Update is triggered when rotations are applied.  The same method
	that the GLArea's OnExpose event handler fires off is now being
	fired off by Teapot's Update EventHandler.  Thus: a) button is
	pressed which b) rotates object which c) triggers the Update
	handler, which d) draws the glarea, including the object
	
	* examples/rotate-buttons/Teapot.cs
	- Created an EventHandler called Update which fires when object is rotated
	- moved Draw() method.  It now applies the rotation matrix, if one exists
	- Rotate() method now hands work off to base.Rotate() (GLObjectBase.cs)
	- Rotate() method now fires off the Updated event
	- added ResetRotation() method
	- ResetRotation() method calls base.ResetRotation() and then fires the Updated handler
	* examples/rotate-buttons/Rotation.cs
	- uhm... added a newline
	* examples/rotate-buttons/ObjectRotationButton.cs
	- ObjectRotationButton now contains an object that implemts IGLObject instead of a GLArea
	- the member variable is now called glObject instead of glArea
	- removed rotMult member variable definition.  Should remove the variable, now that it's not used anymore.
	- handing rotation code off to glObject.Rotate(rotAngle, rotation)
	* examples/rotate-buttons/IGLObject.cs
	- The interface now enforces the use of a Update event handler
	- The interface now enforces the use of a ResetRotation() method
	* examples/rotate-buttons/GLObjectBase.cs
	- now using gl=Tao.OpenGl.Gl
	- removed abstract Draw() method
	- added a rotMatrix member variable
	- the Rotate() method calculates a rotation matrix and stores it
	in rotMatrix
	- The rotMatrix can then be used when Draw() is called to rotate
	the object as desired at draw time
	- ResetRotation() merely sets the rotation matrix to null
	* examples/rotate-buttons/Makefile.am
	- added a bunch of .cs files to our EXTRA_DIST variable
	* examples/rotate-buttons/GLWidget.cs
	- created an AddGLObject(IGLObject ob) method
	- This method adds the passed object to the widget's "associated"
	object list
	- removed teapot addition code from Init() (moved to
	rotateButtonTest.cs
	* examples/rotate-buttons/rotateButtonTest.cs
	- in buildControlWindow(), the teapot is created and associated with the GLWidget
	- ObjectRotationButton now takes an object that implements
	IGLObject rather than a GLArea.  teapot is being passed now
	instead of glw
	

2005-12-29  C.J. Collier  <cjcollier@colliertech.org>
	* examples/rotate-buttons/Teapot.cs
	- Copied from ../shared
	- Will be merged back in after changes are complete to new code
	- Teapot is now implements IGLObject and inherits from GLObjectBase
	- The teapot is drawn and cached by calling Init()
	- We now know how to Draw() ourselves.
	* examples/rotate-buttons/Rotation.cs
	- copied from ../shared
	- Will be merged back in after changes are complete to new code
	- This is a convenient way to refer to a clockwise or c-clockwise rotation in any direction
	* IGLObject.cs
	- This is an interface intended to make GL Object creation easier: Today, Teapots.  Tomorrow the world.  Or quake modles, or whatever.
	* examples/rotate-buttons/ObjectRotationButton.cs
	- This is a widget that inherits from Gtk.Button.  It rotates a GLObject  in a GtkGL.Rotation direction when the button is clicked.
	- It is also the next file to get some love from yours truly
	* examples/rotate-buttons/GtkGLObjectBase.cs
	- This is where methods common to all GLObjects will be implemented
	- Also, common member variables are defined here
	* examples/rotate-buttons/Makefile.am
	- added rotateButtonTest.exe target
	* examples/rotate-buttons/rotateButtonTest.md[ps]
	- created MonoDevelop solution.  I don't think it works right now, but I will be maing it work in the futrue
	* GLWidget.cs
	- Copied from ../shared
	- Will be merged back in after changes are complete to new code
	- now inherits from GLArea
	- we are now calling Teapot.Init() in order to build the teapot
	- we are now calling Teapot.Draw() in order to draw the teapot
	- GLWidget is now a GLArea, so we now use glw instead of glw.glArea
	- there is a control widget.  Did I mention I updated ../common/glwidget.glade ?
	
2005-12-25  C.J. Collier  <cjcollier@colliertech.org>
	* examples/trackball/shapes.cs:
	- depricated this file.  Soon it will be svn rm'd
	- Broke up the content into examples/common/GlWidget.cs, TrackballWidget.cs and trackballTest.cs
	* examples/trackball/Makefile.am:
	- Corrected the all: target
	- made the trackballTest.exe target work
	- fixed EXTRA_DIST and CLEANFILES
	* examples/common/glwidget.glade:
	- changed from glwidgets to glwidget
	- removed silly frame
	- removed statusbar
	* examples/common/GLWidget.cs:
	- created a connectHandlers() method that the handler connection code lives in now
	- added a link to the gluPerspective() man page
	- made OnExposed() a protected method so GLWidget's derived classes can remove it from the event queue
	- shapeList is now protected so derived classes can fiddle with it
	* examples/glade/glwidget.glade
	- moved the file to common/glwidget.glade
	* examples/glade/Makefile.am:
	- changed glwidget.glade to ../shared/glwidget.glade
	* examples/trackball/trackballTest.cs:
	- simple wrapper around TrackballWidget.cs

2005-12-23  C.J. Collier  <cjcollier@colliertech.org>
	* examples/: reorganized the examples that were there, added new ones

	
2005-12-13  C.J. Collier  <cjcollier@colliertech.org>

	* configure.am: added Makefiles for NeHe examples
	* examples/NeHe: Created directory structure for NeHe examples
	* examples/NeHe/Lesson01: Created a minimal OpenGL display
	* examples/NeHe/Lesson02: Created a triangle, square display
